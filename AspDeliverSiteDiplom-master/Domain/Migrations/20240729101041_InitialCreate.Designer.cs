// <auto-generated />
using System;
using DiplomApplication.Domain.Entities;
using DiplomApplication.Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240729101041_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected  void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("WebApplication1.Entities2.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Fullimg")
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("fullimg");

                    b.Property<string>("Img")
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("img");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.Courier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("fio");

                    b.HasKey("Id");

                    b.ToTable("courier", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.Korzina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("productType_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("korzina", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.KorzinaInOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("korzinaInOrder", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("adress");

                    b.Property<int?>("CourierId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("courier_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Is_need_devices")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("pay_type");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status_id");

                    b.Property<int>("Sum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Calories")
                        .HasColumnType("TEXT");

                    b.Property<string>("Grams")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdCategory")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_category");

                    b.Property<string>("Img")
                        .HasColumnType("text")
                        .HasColumnName("img");

                    b.Property<bool>("Is_hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Opis")
                        .HasColumnType("text")
                        .HasColumnName("opis");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Is_delated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_type", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("ImageText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("imageText");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("opis");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("promotion", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.StatusOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("status_order", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("BonusPoints")
                        .HasColumnType("INTEGER")
                        .HasColumnName("bonusPoints");

                    b.Property<string>("Login")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Entities2.Korzina", b =>
                {
                    b.HasOne("WebApplication1.Entities2.ProductType", "ProductType")
                        .WithMany("Korzinas")
                        .HasForeignKey("ProductTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_korzina_product_type1");

                    b.HasOne("WebApplication1.Entities2.User", "User")
                        .WithMany("Korzinas")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_korzina_user");

                    b.Navigation("ProductType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Entities2.KorzinaInOrder", b =>
                {
                    b.HasOne("WebApplication1.Entities2.Order", "Order")
                        .WithMany("KorzinaInOrders")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_korzinaInOrder_order");

                    b.HasOne("WebApplication1.Entities2.ProductType", "Product")
                        .WithMany("KorzinaInOrders")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_korzinaInOrder_product_type");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Entities2.Order", b =>
                {
                    b.HasOne("WebApplication1.Entities2.Courier", "Courier")
                        .WithMany("Orders")
                        .HasForeignKey("CourierId")
                        .HasConstraintName("FK_order_courier");

                    b.HasOne("WebApplication1.Entities2.StatusOrder", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_order_status_order");

                    b.HasOne("WebApplication1.Entities2.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_order_user");

                    b.Navigation("Courier");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Entities2.Product", b =>
                {
                    b.HasOne("WebApplication1.Entities2.Category", "IdCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .HasConstraintName("FK_product_category");

                    b.Navigation("IdCategoryNavigation");
                });

            modelBuilder.Entity("WebApplication1.Entities2.ProductType", b =>
                {
                    b.HasOne("WebApplication1.Entities2.Product", "Product")
                        .WithMany("ProductTypes")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_product_type_product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Entities2.Promotion", b =>
                {
                    b.HasOne("WebApplication1.Entities2.ProductType", "Type")
                        .WithMany("Promotions")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_promotion_product_type");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("WebApplication1.Entities2.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebApplication1.Entities2.Courier", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApplication1.Entities2.Order", b =>
                {
                    b.Navigation("KorzinaInOrders");
                });

            modelBuilder.Entity("WebApplication1.Entities2.Product", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("WebApplication1.Entities2.ProductType", b =>
                {
                    b.Navigation("KorzinaInOrders");

                    b.Navigation("Korzinas");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("WebApplication1.Entities2.StatusOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApplication1.Entities2.User", b =>
                {
                    b.Navigation("Korzinas");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
